package com.urexst.ui;

import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Iterator;


import org.vaadin.hene.expandingtextarea.ExpandingTextArea;

import com.urexst.OfyService;
import com.urexst.model.Mail;
import com.urexst.model.Student;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.Validator;
import com.vaadin.shared.ui.datefield.Resolution;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Component.Event;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.InlineDateField;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Notification.Type;
import com.vaadin.ui.VerticalLayout;

public class AddUsersView extends CustomComponent {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private Button okbutton;
	@AutoGenerated
	private Button addbutton;
	@AutoGenerated
	private VerticalLayout verticalGroup;
	@AutoGenerated
	private VerticalLayout verticall2Inputs;
	@AutoGenerated
	private InlineDateField yearSelect;
	@AutoGenerated
	private ComboBox groupNameSelect;


	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private static final String[] periods = new String[] { "Fall", "Spring",
	"Year"};

	private HashMap<Integer,String> periodYear;

	private ExpandingTextArea emailsField;
	public AddUsersView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here

		periodYear = new HashMap<Integer,String>();
		addbutton.addClickListener(new ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {			


				Calendar temporalDate = new GregorianCalendar();
				temporalDate.setTime(yearSelect.getValue());


				if (periodYear.put(temporalDate.get(Calendar.YEAR),(String) groupNameSelect.getValue())==null){
					HorizontalLayout addedHolder = new HorizontalLayout();
					addedHolder.setSpacing(true);
					addedHolder.setSpacing(true);

					addedHolder.addComponent(new Label((String)groupNameSelect.getValue()+" "+temporalDate.get(Calendar.YEAR)));
					addedHolder.addComponent(new Button("Remove",new ClickListener() {

						@Override
						public void buttonClick(ClickEvent event) {
							periodYear.remove(((HorizontalLayout)event.getComponent().getParent()).getData());
							verticalGroup.removeComponent(event.getComponent().getParent());
						}
					}));
					addedHolder.setData(temporalDate.get(Calendar.YEAR));
					verticalGroup.addComponent(addedHolder);
				}
				else{
					Notification.show("Year already added");
				}

			}
		});

		okbutton.addClickListener(new ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				String[] listofStrings = emailsField.getValue().split(";");
				ArrayList<String> listofError = new ArrayList<String>();
//				Calendar cal = new GregorianCalendar();
				SecureRandom random= null;
				String tmpPsswd = null; 
				boolean sent = true;

				for (String address:listofStrings){
					random = new SecureRandom();
					sent = true;

					try {
						tmpPsswd = new BigInteger(130, random).toString(32);
						Mail.sendMail(address, "Account confirmation", "A new account has been created for this email account, your temporal password is: "+tmpPsswd+"\n Please enter the system at http://urexst.appspot.com and change it from your personal panel");
					}
					catch (Exception e){
						listofError.add(address);
						sent=false;

					}

					if (sent){
						Student invitOk = new Student();
						invitOk.setEmail(address);
						invitOk.setPassword(tmpPsswd);
						ArrayList<String> groups = new ArrayList<String>();
						Iterator<Component> groupsAdded = verticalGroup.getComponentIterator();
						while (groupsAdded.hasNext()){
							Component comp = groupsAdded.next();
							if (comp.equals(verticall2Inputs)){
//								cal.setTime(yearSelect.getValue());				
//								groups.add(groupNameSelect.getValue().toString()+" "+ cal.get(Calendar.YEAR));
							}
							else{
								groups.add(((Label)((HorizontalLayout)comp).getComponent(0)).getValue());
								
							}
							
						}
						invitOk.setGroupList(groups);
						OfyService.ofy().save().entity(invitOk).now();
							
					}
					tmpPsswd = null;

				}
				
				

				if (listofError.isEmpty()){
					Notification.show("All the emails were successfully invited");
				}
				else{
					Notification.show("Could not invite "+listofError.toString()+" to the system",Type.ERROR_MESSAGE);
				}			

			}
		});



		yearSelect.setResolution(Resolution.YEAR);
		emailsField = new ExpandingTextArea();	
		emailsField.setCaption("List of emails");
		emailsField.setImmediate(true);
		emailsField.setInputPrompt("List  of emails separated by \";\"");
		mainLayout.addComponent(emailsField,0);
		emailsField.addValidator(new Validator() {

			@Override
			public void validate(Object value) throws InvalidValueException {

				if (!(((String)value).matches("(([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)(\\s*;\\s*|\\s*$))+"))){
					okbutton.setEnabled(false);
					throw new InvalidValueException("Error parsing mail list make sure they are separated by semicolons");
				}



			}
		});

		emailsField.addValueChangeListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				if (emailsField.isValid() && verticalGroup.getComponentCount()>1){
					okbutton.setEnabled(true);
				}
				else{
					okbutton.setEnabled(false);					
				}

			}
		});

		emailsField.setRequired(true);
		emailsField.setRequiredError("At least one mail should be introduced");

		groupNameSelect.setImmediate(true);
		groupNameSelect.setCaption("Group membership");
		groupNameSelect.addItem(periods[0]);
		groupNameSelect.addItem(periods[1]);
		groupNameSelect.addItem(periods[2]);
		groupNameSelect.setRequired(true);
		groupNameSelect.setRequiredError("At least one group should be associated with the users");
		groupNameSelect.setNullSelectionAllowed(false);
		groupNameSelect.setValue("Fall");
		verticalGroup.addListener(new Listener() {
			
			@Override
			public void componentEvent(Event event) {
				if (emailsField.isValid() && verticalGroup.getComponentCount()>1){
					okbutton.setEnabled(true);
				}
				else{
					okbutton.setEnabled(false);					
				}
				
			}
		});



		verticall2Inputs.setComponentAlignment(groupNameSelect, Alignment.MIDDLE_CENTER);
		mainLayout.setComponentAlignment(emailsField, Alignment.MIDDLE_CENTER);
		mainLayout.setComponentAlignment(verticalGroup, Alignment.MIDDLE_CENTER);
		mainLayout.setComponentAlignment(okbutton, Alignment.BOTTOM_CENTER);







	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);


		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");


		// verticalGroup
		verticalGroup = buildVerticalGroup();
		mainLayout.addComponent(verticalGroup);


		// okbutton
		okbutton = new Button();
		okbutton.setCaption("Send invitation emails");
		okbutton.setEnabled(false);
		okbutton.setImmediate(true);
		okbutton.setWidth("-1px");
		okbutton.setHeight("-1px");
		mainLayout.addComponent(okbutton);

		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalGroup() {
		// common part: create layout
		verticalGroup = new VerticalLayout();
		verticalGroup.setImmediate(false);
		verticalGroup.setWidth("-1px");
		verticalGroup.setHeight("-1px");
		verticalGroup.setMargin(false);
		verticalGroup.setSpacing(true);

		// verticall2Inputs
		verticall2Inputs = buildVerticall2Inputs();
		verticalGroup.addComponent(verticall2Inputs);

		return verticalGroup;
	}

	@AutoGenerated
	private VerticalLayout buildVerticall2Inputs() {
		// common part: create layout
		verticall2Inputs = new VerticalLayout();
		verticall2Inputs.setImmediate(false);
		verticall2Inputs.setWidth("-1px");
		verticall2Inputs.setHeight("-1px");
		verticall2Inputs.setMargin(false);
		verticall2Inputs.setSpacing(true);


		HorizontalLayout moreGroups = new HorizontalLayout();
		moreGroups.setSpacing(true);


		// groupNameSelect
		groupNameSelect = new ComboBox();
		groupNameSelect.setImmediate(true);
		groupNameSelect.setWidth("-1px");
		groupNameSelect.setHeight("-1px");
		verticall2Inputs.addComponent(groupNameSelect);

		// yearSelect
		yearSelect = new InlineDateField();
		yearSelect.setImmediate(false);
		yearSelect.setWidth("-1px");
		yearSelect.setHeight("-1px");
		moreGroups.addComponent(yearSelect);

		// addbutton
		addbutton = new Button();
		addbutton.setCaption("+");
		addbutton.setImmediate(true);
		addbutton.setWidth("-1px");
		addbutton.setHeight("-1px");
		moreGroups.addComponent(addbutton);

		verticall2Inputs.addComponent(moreGroups);


		return verticall2Inputs;
	}

}
