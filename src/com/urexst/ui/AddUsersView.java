package com.urexst.ui;

import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.ArrayList;

import org.vaadin.hene.expandingtextarea.ExpandingTextArea;

import com.urexst.model.Mail;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.Validator;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.shared.ui.datefield.Resolution;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.InlineDateField;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Notification.Type;

public class AddUsersView extends CustomComponent {

	@AutoGenerated
	private GridLayout mainLayout;
	@AutoGenerated
	private Button okbutton;	
	private ExpandingTextArea emailsField;
	@AutoGenerated
	private Label emails;
	@AutoGenerated
	private VerticalLayout verticalGroup;
	@AutoGenerated
	private VerticalLayout verticall2Inputs;
	@AutoGenerated
	private InlineDateField yearSelect;
	@AutoGenerated
	private ComboBox groupNameSelect;
	@AutoGenerated
	private Label groups;


	
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public AddUsersView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
	
		yearSelect.setResolution(Resolution.YEAR);
		okbutton.addClickListener(new ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				String[] listofStrings = emailsField.getValue().split(",");
				ArrayList<String> listofError = new ArrayList<String>();
				
				for (String address:listofStrings){
					
					SecureRandom random = new SecureRandom();					 
					try {
						Mail.sendMail(address, "Account confirmation", "A new account has been created for this email account, your temporal password is: "+new BigInteger(130, random).toString(32)+"\n Please enter the system at http://urexst.appspot.com and change it from your personal panel");
					}
					catch (Exception e){
						listofError.add(address);
					}
				}
				
				if (listofError.isEmpty()){
					Notification.show("All the emails were successfully invited");
				}
				else{
					Notification.show("Could not invite "+listofError.toString()+" to the system",Type.ERROR_MESSAGE);
				}			
				
			}
		});
				
		
		emailsField = new ExpandingTextArea();	
		emailsField.setImmediate(true);
		emailsField.setInputPrompt("List  of emails separated by \",\"");
		mainLayout.addComponent(emailsField, 1, 0);
		emailsField.addValidator(new Validator() {
			
			@Override
			public void validate(Object value) throws InvalidValueException {
				
				if (!(((String)value).matches("(([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)(\\s*,\\s*|\\s*$))+"))){
					okbutton.setEnabled(false);
					throw new InvalidValueException("Error parsing mail list make sure they are separated by commas");
				}
				
				
				
			}
		});
		
		emailsField.addValueChangeListener(new ValueChangeListener() {
			
			@Override
			public void valueChange(ValueChangeEvent event) {
				if (emailsField.isValid()){
					okbutton.setEnabled(true);
				}
				else{
					okbutton.setEnabled(false);					
				}
				
			}
		});
		
		emailsField.setRequired(true);
		emailsField.setRequiredError("At least one mail should be introduced");
		
		groupNameSelect.setImmediate(true);
		groupNameSelect.addItem("Spring");
		groupNameSelect.addItem("Fall");
		groupNameSelect.addItem("Year");
		groupNameSelect.setRequired(true);
		groupNameSelect.setRequiredError("At least one group should be associated with the users");
		groupNameSelect.setNullSelectionAllowed(false);
		groupNameSelect.setNullSelectionItemId("Fall");
		
		
		
		
		
		
		
		
	}

	@AutoGenerated
	private GridLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new GridLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		mainLayout.setColumns(2);
		mainLayout.setRows(3);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");
		
		// groups
		groups = new Label();
		groups.setImmediate(false);
		groups.setWidth("-1px");
		groups.setHeight("-1px");
		groups.setValue("Group membership ");
		mainLayout.addComponent(groups, 0, 1);
		mainLayout.setComponentAlignment(groups, new Alignment(6));
		
		// verticalGroup
		verticalGroup = buildVerticalGroup();
		mainLayout.addComponent(verticalGroup, 1, 1);
		
		// emails
		emails = new Label();
		emails.setImmediate(false);
		emails.setWidth("-1px");
		emails.setHeight("-1px");
		emails.setValue("List of emails ");
		mainLayout.addComponent(emails, 0, 0);
		mainLayout.setComponentAlignment(emails, new Alignment(6));
		
		
		
		
		
		// okbutton
		okbutton = new Button();
		okbutton.setCaption("Send invitation emails");
		okbutton.setImmediate(true);
		okbutton.setEnabled(false);
		okbutton.setWidth("-1px");
		okbutton.setHeight("-1px");
		mainLayout.addComponent(okbutton, 0,2,1, 2);
		mainLayout.setComponentAlignment(okbutton, Alignment.BOTTOM_CENTER);
		
		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalGroup() {
		// common part: create layout
		verticalGroup = new VerticalLayout();
		verticalGroup.setImmediate(false);
		verticalGroup.setWidth("-1px");
		verticalGroup.setHeight("-1px");
		verticalGroup.setMargin(false);
		
		// horizontal2Inputs
		verticall2Inputs = buildHorizontal2Inputs();
		verticalGroup.addComponent(verticall2Inputs);
		
		return verticalGroup;
	}

	@AutoGenerated
	private VerticalLayout buildHorizontal2Inputs() {
		// common part: create layout
		verticall2Inputs = new VerticalLayout();
		verticall2Inputs.setImmediate(false);
		verticall2Inputs.setWidth("-1px");
		verticall2Inputs.setHeight("-1px");
		verticall2Inputs.setMargin(false);
		verticall2Inputs.setSpacing(true);
		
		// groupNameSelect
		groupNameSelect = new ComboBox();
		groupNameSelect.setImmediate(false);
		groupNameSelect.setWidth("-1px");
		groupNameSelect.setHeight("-1px");
		verticall2Inputs.addComponent(groupNameSelect);
		verticall2Inputs.setComponentAlignment(groupNameSelect, Alignment.MIDDLE_CENTER);
		
		
		// yearSelect
		yearSelect = new InlineDateField();
		yearSelect.setImmediate(false);
		yearSelect.setWidth("-1px");
		yearSelect.setHeight("-1px");
		verticall2Inputs.addComponent(yearSelect);
		verticall2Inputs.setComponentAlignment(yearSelect, Alignment.MIDDLE_CENTER);
		
		return verticall2Inputs;
	}

}
